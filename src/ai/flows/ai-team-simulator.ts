// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Implements the AI Team vs AI Team simulation flow.
 *
 * - aiTeamSimulator - A function that runs the AI team simulation.
 * - AiTeamSimulatorInput - The input type for the aiTeamSimulator function.
 * - AiTeamSimulatorOutput - The return type for the aiTeamSimulator function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiTeamSimulatorInputSchema = z.object({
  teamAStrategy: z
    .string()
    .describe('The resolution strategy for AI Team A.'),
  teamBStrategy: z
    .string()
    .describe('The resolution strategy for AI Team B.'),
  scenarioDescription: z
    .string()
    .describe('A detailed description of the scenario for the AI teams to resolve.'),
  numRounds: z
    .number()
    .describe('The number of simulation rounds to run.')
    .default(3), // Default to 3 rounds
});
export type AiTeamSimulatorInput = z.infer<typeof AiTeamSimulatorInputSchema>;

const AiTeamSimulatorOutputSchema = z.object({
  simulationResults: z.array(
    z.object({
      round: z.number().describe('The round number of the simulation.'),
      teamAResponse: z.string().describe('The response from AI Team A.'),
      teamBResponse: z.string().describe('The response from AI Team B.'),
      outcome: z.string().describe('The outcome of the round.'),
    })
  ).describe('The results of the AI team simulation.'),
});
export type AiTeamSimulatorOutput = z.infer<typeof AiTeamSimulatorOutputSchema>;

export async function aiTeamSimulator(input: AiTeamSimulatorInput): Promise<AiTeamSimulatorOutput> {
  return aiTeamSimulatorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiTeamSimulatorPrompt',
  input: {schema: AiTeamSimulatorInputSchema},
  output: {schema: AiTeamSimulatorOutputSchema},
  prompt: `You are an AI simulation facilitator. You will run a simulation of two AI teams (Team A and Team B) competing to resolve a given scenario. Each team has a specific resolution strategy. The simulation will run for a specified number of rounds.  For each round, generate a response from each team, and then determine the outcome of the round.  Record the response from each team and the outcome of each round in the simulationResults array.  \n\nScenario Description: {{{scenarioDescription}}}\nTeam A Strategy: {{{teamAStrategy}}}\nTeam B Strategy: {{{teamBStrategy}}}\nNumber of Rounds: {{{numRounds}}}\n\nOutput in JSON format:
```,
});

const aiTeamSimulatorFlow = ai.defineFlow(
  {
    name: 'aiTeamSimulatorFlow',
    inputSchema: AiTeamSimulatorInputSchema,
    outputSchema: AiTeamSimulatorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
